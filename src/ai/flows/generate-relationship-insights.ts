'use server';

/**
 * @fileOverview Generates relationship insights based on quiz responses.
 *
 * - generateRelationshipInsights - A function that generates a detailed relationship report.
 * - RelationshipInsightsInput - The input type for the generateRelationshipInsights function.
 * - RelationshipInsightsOutput - The return type for the generateRelationshipInsights function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const RelationshipInsightsInputSchema = z.object({
  communication: z.array(z.string()).describe('Responses to communication questions.'),
  timeTogether: z.array(z.string()).describe('Responses to time together and attention questions.'),
  behaviorChanges: z.array(z.string()).describe('Responses to behavior changes questions.'),
  reactionsToConflicts: z.array(z.string()).describe('Responses to reactions to conflicts questions.'),
  signsOfInterest: z.array(z.string()).describe('Responses to signs of interest questions.'),
});
export type RelationshipInsightsInput = z.infer<typeof RelationshipInsightsInputSchema>;

const RelationshipInsightsOutputSchema = z.object({
  detailedSummary: z.string().describe('A detailed summary of the relationship insights.'),
  psychologicalInterpretations: z.string().describe('Psychological interpretations of observed signals.'),
  actionPlan: z.string().describe('A 7-day action plan with message scripts.'),
});
export type RelationshipInsightsOutput = z.infer<typeof RelationshipInsightsOutputSchema>;

export async function generateRelationshipInsights(input: RelationshipInsightsInput): Promise<RelationshipInsightsOutput> {
  return generateRelationshipInsightsFlow(input);
}

const prompt = ai.definePrompt({
  name: 'relationshipInsightsPrompt',
  input: {schema: RelationshipInsightsInputSchema},
  output: {schema: RelationshipInsightsOutputSchema},
  prompt: `Voc√™ √© uma especialista em relacionamentos de IA, com um tom emp√°tico e pessoal. Analise as respostas do question√°rio e gere um relat√≥rio detalhado em portugu√™s, seguindo estritamente as instru√ß√µes de formata√ß√£o.

**Instru√ß√µes de Formata√ß√£o e Tom:**
- **Tom Pessoal:** Fale diretamente com o usu√°rio (use "voc√™", "suas respostas"). O tom deve ser acolhedor e emocional, como uma conversa.
- **Clareza e Simplicidade:** Use par√°grafos curtos, linguagem clara e direta. Evite jarg√µes.
- **Estrutura do Relat√≥rio:**
    1.  **Resumo Detalhado (detailedSummary):** Comece com uma an√°lise geral e emocional. Use a estrutura:
        - T√≠tulo: "Aqui est√° o que suas respostas nos dizem... üí¨"
        - Par√°grafos curtos analisando os pontos fortes e fracos.
        - T√≠tulo: "Insight R√°pido üí°" para uma dica ou observa√ß√£o central.
        - Use emojis relevantes (ex: ‚ù§Ô∏è, üíî, ü§î, ‚ú®) para dar vida ao texto.
        - Formate usando tags HTML: \`<h3>\` para t√≠tulos, \`<p>\` para par√°grafos.
    2.  **Interpreta√ß√µes Psicol√≥gicas (psychologicalInterpretations):**
        - T√≠tulo: "Analisando os Sinais... üß†"
        - Explique o significado por tr√°s dos comportamentos observados.
        - Use \`<strong>\` para destacar conceitos importantes.
        - Formate usando tags HTML: \`<h3>\` para o t√≠tulo, \`<p>\` para par√°grafos.
    3.  **Plano de A√ß√£o (actionPlan):**
        - T√≠tulo: "Seu Plano de A√ß√£o de 7 Dias üóìÔ∏è"
        - Crie um plano pr√°tico, dia a dia.
        - Use uma lista n√£o ordenada (\`<ul>\`) para os dias e \`<strong>\` para "Dia X:".
        - Inclua a√ß√µes e, se relevante, roteiros de mensagem.
        - Adicione um t√≠tulo final: "Conclus√£o Final ‚ú®".
        - Formate usando tags HTML: \`<h3>\` para t√≠tulos, \`<ul>\` e \`<li>\` para a lista.
- **Linguagem:** O resultado final deve ser sempre em portugu√™s do Brasil.

**Dados para An√°lise:**
Respostas de Comunica√ß√£o: {{communication}}
Respostas de Tempo Juntos: {{timeTogether}}
Respostas de Mudan√ßas de Comportamento: {{behaviorChanges}}
Respostas de Rea√ß√µes a Conflitos: {{reactionsToConflicts}}
Respostas de Sinais de Interesse: {{signsOfInterest}}`,
});

const generateRelationshipInsightsFlow = ai.defineFlow(
  {
    name: 'generateRelationshipInsightsFlow',
    inputSchema: RelationshipInsightsInputSchema,
    outputSchema: RelationshipInsightsOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
